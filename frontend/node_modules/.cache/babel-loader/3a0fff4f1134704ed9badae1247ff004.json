{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._token = options.headers.authorization;\n  } // получение информации пользователя в формате name: res.name, about: res.about, avatar: res.avatar, id: res._id\n\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/cohort-34/users/me`, {\n      headers: {\n        authorization: `${this._token}`\n      }\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  } // обновление информации пользователя\n\n\n  updateUserInfo(newName, newNote) {\n    return fetch(`${this._baseUrl}/cohort-34/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: newName,\n        about: newNote\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  } // получение начальных карточек\n\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cohort-34/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  } // добавление новой карточки\n\n\n  addCard(imageName, imageLink) {\n    return fetch(`${this._baseUrl}/cohort-34/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: imageName,\n        link: imageLink\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  } // получение данных карточек\n\n\n  getCardsInfo() {\n    return fetch(`${this._baseUrl}/cohort-34/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  } // удаление карточки по id\n\n\n  removeCard(id) {\n    return fetch(`${this._baseUrl}/cohort-34/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  } // добавление карточке лайка по id\n\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cohort-34/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  } // удаление лайка по id\n\n\n  removeLike(id) {\n    return fetch(`${this._baseUrl}/cohort-34/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._getResponseData(res);\n    }).then(res => {\n      return res;\n    });\n  } // изменение аватара\n\n\n  changeAvatar(avatarUrl) {\n    return fetch(`${this._baseUrl}/cohort-34/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: `${this._token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarUrl\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  _getResponseData(res) {\n    return !res.ok ? Promise.reject(`Ошибка: ${res.status}`) : res.json();\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://nomoreparties.co/v1',\n  headers: {\n    authorization: '6a51e53e-46b7-4c82-b7df-ab43a73f6f4d'\n  }\n});\nexport default api;","map":{"version":3,"sources":["C:/study projects/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_baseUrl","baseUrl","_token","headers","authorization","getUserInfo","fetch","then","res","_getResponseData","updateUserInfo","newName","newNote","method","body","JSON","stringify","name","about","getInitialCards","addCard","imageName","imageLink","link","getCardsInfo","removeCard","id","addLike","removeLike","changeAvatar","avatarUrl","avatar","ok","Promise","reject","status","json","api"],"mappings":"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","sourcesContent":["class Api {\r\n    constructor(options) {\r\n        this._baseUrl = options.baseUrl;\r\n        this._token = options.headers.authorization;\r\n    }\r\n\r\n    // получение информации пользователя в формате name: res.name, about: res.about, avatar: res.avatar, id: res._id\r\n    getUserInfo() {\r\n        return fetch(`${this._baseUrl}/cohort-34/users/me`, {\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n            }\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // обновление информации пользователя\r\n    updateUserInfo(newName, newNote) {\r\n        return fetch(`${this._baseUrl}/cohort-34/users/me`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: newName,\r\n                about: newNote\r\n            })\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // получение начальных карточек\r\n    getInitialCards() {\r\n        return fetch(`${this._baseUrl}/cohort-34/cards`, {\r\n            method: 'GET',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // добавление новой карточки\r\n    addCard(imageName, imageLink) {\r\n        return fetch(`${this._baseUrl}/cohort-34/cards`, {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: imageName,\r\n                link: imageLink\r\n            })\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // получение данных карточек\r\n    getCardsInfo() {\r\n        return fetch(`${this._baseUrl}/cohort-34/cards`, {\r\n            method: 'GET',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // удаление карточки по id\r\n    removeCard(id) {\r\n        return fetch(`${this._baseUrl}/cohort-34/cards/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // добавление карточке лайка по id\r\n    addLike(id) {\r\n        return fetch(`${this._baseUrl}/cohort-34/cards/${id}/likes`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // удаление лайка по id\r\n    removeLike(id) {\r\n        return fetch(`${this._baseUrl}/cohort-34/cards/${id}/likes`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        }).then((res) => {\r\n            return res;\r\n        });\r\n    }\r\n\r\n    // изменение аватара\r\n    changeAvatar(avatarUrl) {\r\n        return fetch(`${this._baseUrl}/cohort-34/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: `${this._token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                avatar: avatarUrl,\r\n            })\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    _getResponseData(res) {\r\n        return (!res.ok) ? Promise.reject(`Ошибка: ${res.status}`) : res.json();\r\n    }\r\n}\r\n\r\nconst api = new Api({\r\n    baseUrl: 'https://nomoreparties.co/v1',\r\n    headers: {\r\n        authorization: '6a51e53e-46b7-4c82-b7df-ab43a73f6f4d'\r\n    }\r\n});\r\n\r\nexport default api;"]},"metadata":{},"sourceType":"module"}